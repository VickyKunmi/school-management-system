generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Settings {
  id           Int      @id @default(autoincrement())
  academicYear String
  term         Term
  updatedAt    DateTime @updatedAt
}

model Admission {
  id              Int          @id @default(autoincrement())
  admissionNumber String       @unique
  firstName       String
  lastName        String
  middleName      String?
  address         String
  img             String
  bloodType       String
  sex             UserSex
  birthday        DateTime
  admissionDate   DateTime     @default(now())
  previousSchool  String?
  parentContact   String
  enrollments     Enrollment[]
}

model Enrollment {
  id           Int       @id @default(autoincrement())
  admissionId  Int
  admission    Admission @relation(fields: [admissionId], references: [id])
  classId      Int
  class        Class     @relation(fields: [classId], references: [id])
  gradeId      Int
  grade        Grade     @relation(fields: [gradeId], references: [id])
  academicYear String
  term         Term
  status       String // Active, Completed, Dropped
  subjects     Subject[] @relation("SubjectEnrollments")
  results      Result[]
}

model Result {
  id           Int        @id @default(autoincrement())
  enrollmentId Int
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  subjectId    Int
  subject      Subject    @relation(fields: [subjectId], references: [id])
  score        Float
  grade        String
  academicYear String
  term         Term

  @@unique([enrollmentId, subjectId])
}

// model Teacher {
//   id        String @id
//   username  String @unique
//   firstName String
//   lastName  String

//   email       String              @unique
//   phone       String              @unique
//   address     String
//   img         String
//   bloodType   String
//   sex         UserSex
//   createdAt   DateTime            @default(now())
//   birthday    DateTime
//   attendances TeacherAttendance[]
// }

// model TeacherAttendance {
//   id          String           @id @default(uuid())
//   teacherId   String
//   date        DateTime
//   startTime   DateTime
//   endTime     DateTime
//   signInTime  DateTime
//   signOutTime DateTime?
//   status      AttendanceStatus @default(Absent)
//   qrCode      String
//   expiresAt   DateTime
//   teacher     Teacher          @relation(fields: [teacherId], references: [id], onDelete: Cascade)

//   @@unique([teacherId, date])
// }

model Employee {
  id           String       @id @default(uuid())
  employeeId   String       @unique
  username     String       @unique
  firstName    String
  lastName     String
  email        String       @unique
  phone        String       @unique
  address      String
  img          String
  jobTitle     String
  hireDate     DateTime
  contractType ContractType
  sex          UserSex
  birthday     DateTime
  createdAt    DateTime     @default(now())

  // Relations
  payrolls    Payroll[]
  attendances Attendance[]
}

model Payroll {
  id         String   @id @default(uuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  salary     Float
  bonus      Float?
  deductions Float?
  payDate    DateTime
}

model Attendance {
  id          String           @id @default(uuid())
  employeeId  String
  employee    Employee         @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date        DateTime
  startTime   DateTime
  endTime     DateTime
  signInTime  DateTime
  signOutTime DateTime?
  status      AttendanceStatus @default(Absent)
  qrCode      String?
  expiresAt   DateTime?

  @@unique([employeeId, date])
}

model Grade {
  id          Int          @id @default(autoincrement())
  level       Int          @unique
  enrollments Enrollment[]
  classes     Class[]
  subjects    Subject[]    @relation("SubjectGrades")
}

model Class {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  capacity    Int
  enrollments Enrollment[]
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  subjects    Subject[]    @relation("SubjectClasses")
}

model Subject {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  grades      Grade[]      @relation("SubjectGrades")
  classes     Class[]      @relation("SubjectClasses")
  enrollments Enrollment[] @relation("SubjectEnrollments")
  results     Result[]
}

enum UserSex {
  MALE
  FEMALE
}

enum Status {
  PRESENT
  ABSENT
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}

enum AttendanceStatus {
  Present
  Absent
  Late
  Excused
}

enum ContractType {
  FullTime
  PartTime
  Temporary
  Contract
}

enum Term {
  First
  Second
  Third
}
